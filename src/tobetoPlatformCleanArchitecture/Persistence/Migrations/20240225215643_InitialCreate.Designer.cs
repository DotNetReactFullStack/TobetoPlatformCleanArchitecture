// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20240225215643_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Security.Entities.EmailAuthenticator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivationKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Instructor"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Admin"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Read"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Write"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Add"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Update"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accounts.Delete"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Admin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Read"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Write"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Add"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Update"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cities.Delete"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Admin"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Read"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Write"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Add"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Update"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Countries.Delete"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Admin"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Read"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Write"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Add"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Update"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Addresses.Delete"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Admin"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Read"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Write"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Add"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Update"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Districts.Delete"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Admin"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Read"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Write"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Add"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Update"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Capabilities.Delete"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Admin"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Read"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Write"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Add"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Update"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCapabilities.Delete"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Admin"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Read"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Write"
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Add"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Update"
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguageLevels.Delete"
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Admin"
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Read"
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Write"
                        },
                        new
                        {
                            Id = 55,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Add"
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Update"
                        },
                        new
                        {
                            Id = 57,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ForeignLanguages.Delete"
                        },
                        new
                        {
                            Id = 58,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Admin"
                        },
                        new
                        {
                            Id = 59,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Read"
                        },
                        new
                        {
                            Id = 60,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Write"
                        },
                        new
                        {
                            Id = 61,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Add"
                        },
                        new
                        {
                            Id = 62,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Update"
                        },
                        new
                        {
                            Id = 63,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountForeignLanguageMetadatas.Delete"
                        },
                        new
                        {
                            Id = 64,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Admin"
                        },
                        new
                        {
                            Id = 65,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Read"
                        },
                        new
                        {
                            Id = 66,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Write"
                        },
                        new
                        {
                            Id = 67,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Add"
                        },
                        new
                        {
                            Id = 68,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Update"
                        },
                        new
                        {
                            Id = 69,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Certificates.Delete"
                        },
                        new
                        {
                            Id = 70,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Admin"
                        },
                        new
                        {
                            Id = 71,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Read"
                        },
                        new
                        {
                            Id = 72,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Write"
                        },
                        new
                        {
                            Id = 73,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Add"
                        },
                        new
                        {
                            Id = 74,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Update"
                        },
                        new
                        {
                            Id = 75,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCertificates.Delete"
                        },
                        new
                        {
                            Id = 76,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Admin"
                        },
                        new
                        {
                            Id = 77,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Read"
                        },
                        new
                        {
                            Id = 78,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Write"
                        },
                        new
                        {
                            Id = 79,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Add"
                        },
                        new
                        {
                            Id = 80,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Update"
                        },
                        new
                        {
                            Id = 81,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SocialMediaPlatforms.Delete"
                        },
                        new
                        {
                            Id = 82,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Admin"
                        },
                        new
                        {
                            Id = 83,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Read"
                        },
                        new
                        {
                            Id = 84,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Write"
                        },
                        new
                        {
                            Id = 85,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Add"
                        },
                        new
                        {
                            Id = 86,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Update"
                        },
                        new
                        {
                            Id = 87,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountSocialMediaPlatforms.Delete"
                        },
                        new
                        {
                            Id = 88,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Admin"
                        },
                        new
                        {
                            Id = 89,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Read"
                        },
                        new
                        {
                            Id = 90,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Write"
                        },
                        new
                        {
                            Id = 91,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Add"
                        },
                        new
                        {
                            Id = 92,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Update"
                        },
                        new
                        {
                            Id = 93,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GraduationStatus.Delete"
                        },
                        new
                        {
                            Id = 94,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Admin"
                        },
                        new
                        {
                            Id = 95,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Read"
                        },
                        new
                        {
                            Id = 96,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Write"
                        },
                        new
                        {
                            Id = 97,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Add"
                        },
                        new
                        {
                            Id = 98,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Update"
                        },
                        new
                        {
                            Id = 99,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Colleges.Delete"
                        },
                        new
                        {
                            Id = 100,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Admin"
                        },
                        new
                        {
                            Id = 101,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Read"
                        },
                        new
                        {
                            Id = 102,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Write"
                        },
                        new
                        {
                            Id = 103,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Add"
                        },
                        new
                        {
                            Id = 104,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Update"
                        },
                        new
                        {
                            Id = 105,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EducationPrograms.Delete"
                        },
                        new
                        {
                            Id = 106,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Admin"
                        },
                        new
                        {
                            Id = 107,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Read"
                        },
                        new
                        {
                            Id = 108,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Write"
                        },
                        new
                        {
                            Id = 109,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Add"
                        },
                        new
                        {
                            Id = 110,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Update"
                        },
                        new
                        {
                            Id = 111,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCollegeMetadatas.Delete"
                        },
                        new
                        {
                            Id = 112,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Admin"
                        },
                        new
                        {
                            Id = 113,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Read"
                        },
                        new
                        {
                            Id = 114,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Write"
                        },
                        new
                        {
                            Id = 115,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Add"
                        },
                        new
                        {
                            Id = 116,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Update"
                        },
                        new
                        {
                            Id = 117,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SurveyTypes.Delete"
                        },
                        new
                        {
                            Id = 118,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Admin"
                        },
                        new
                        {
                            Id = 119,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Read"
                        },
                        new
                        {
                            Id = 120,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Write"
                        },
                        new
                        {
                            Id = 121,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Add"
                        },
                        new
                        {
                            Id = 122,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Update"
                        },
                        new
                        {
                            Id = 123,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Surveys.Delete"
                        },
                        new
                        {
                            Id = 124,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Admin"
                        },
                        new
                        {
                            Id = 125,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Read"
                        },
                        new
                        {
                            Id = 126,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Write"
                        },
                        new
                        {
                            Id = 127,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Add"
                        },
                        new
                        {
                            Id = 128,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Update"
                        },
                        new
                        {
                            Id = 129,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OrganizationTypes.Delete"
                        },
                        new
                        {
                            Id = 130,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Admin"
                        },
                        new
                        {
                            Id = 131,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Read"
                        },
                        new
                        {
                            Id = 132,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Write"
                        },
                        new
                        {
                            Id = 133,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Add"
                        },
                        new
                        {
                            Id = 134,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Update"
                        },
                        new
                        {
                            Id = 135,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizations.Delete"
                        },
                        new
                        {
                            Id = 136,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Admin"
                        },
                        new
                        {
                            Id = 137,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Read"
                        },
                        new
                        {
                            Id = 138,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Write"
                        },
                        new
                        {
                            Id = 139,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Add"
                        },
                        new
                        {
                            Id = 140,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Update"
                        },
                        new
                        {
                            Id = 141,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AnnouncementTypes.Delete"
                        },
                        new
                        {
                            Id = 142,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Admin"
                        },
                        new
                        {
                            Id = 143,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Read"
                        },
                        new
                        {
                            Id = 144,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Write"
                        },
                        new
                        {
                            Id = 145,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Add"
                        },
                        new
                        {
                            Id = 146,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Update"
                        },
                        new
                        {
                            Id = 147,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Announcements.Delete"
                        },
                        new
                        {
                            Id = 148,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Admin"
                        },
                        new
                        {
                            Id = 149,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Read"
                        },
                        new
                        {
                            Id = 150,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Write"
                        },
                        new
                        {
                            Id = 151,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Add"
                        },
                        new
                        {
                            Id = 152,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Update"
                        },
                        new
                        {
                            Id = 153,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QuestionCategories.Delete"
                        },
                        new
                        {
                            Id = 154,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Admin"
                        },
                        new
                        {
                            Id = 155,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Read"
                        },
                        new
                        {
                            Id = 156,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Write"
                        },
                        new
                        {
                            Id = 157,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Add"
                        },
                        new
                        {
                            Id = 158,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Update"
                        },
                        new
                        {
                            Id = 159,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Questions.Delete"
                        },
                        new
                        {
                            Id = 160,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Admin"
                        },
                        new
                        {
                            Id = 161,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Read"
                        },
                        new
                        {
                            Id = 162,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Write"
                        },
                        new
                        {
                            Id = 163,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Add"
                        },
                        new
                        {
                            Id = 164,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Update"
                        },
                        new
                        {
                            Id = 165,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Answers.Delete"
                        },
                        new
                        {
                            Id = 166,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Admin"
                        },
                        new
                        {
                            Id = 167,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Read"
                        },
                        new
                        {
                            Id = 168,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Write"
                        },
                        new
                        {
                            Id = 169,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Add"
                        },
                        new
                        {
                            Id = 170,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Update"
                        },
                        new
                        {
                            Id = 171,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Exams.Delete"
                        },
                        new
                        {
                            Id = 172,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Admin"
                        },
                        new
                        {
                            Id = 173,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Read"
                        },
                        new
                        {
                            Id = 174,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Write"
                        },
                        new
                        {
                            Id = 175,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Add"
                        },
                        new
                        {
                            Id = 176,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Update"
                        },
                        new
                        {
                            Id = 177,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ExamQuestions.Delete"
                        },
                        new
                        {
                            Id = 178,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Admin"
                        },
                        new
                        {
                            Id = 179,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Read"
                        },
                        new
                        {
                            Id = 180,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Write"
                        },
                        new
                        {
                            Id = 181,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Add"
                        },
                        new
                        {
                            Id = 182,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Update"
                        },
                        new
                        {
                            Id = 183,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ClassroomExams.Delete"
                        },
                        new
                        {
                            Id = 184,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Admin"
                        },
                        new
                        {
                            Id = 185,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Read"
                        },
                        new
                        {
                            Id = 186,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Write"
                        },
                        new
                        {
                            Id = 187,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Add"
                        },
                        new
                        {
                            Id = 188,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Update"
                        },
                        new
                        {
                            Id = 189,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountExamResults.Delete"
                        },
                        new
                        {
                            Id = 190,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Admin"
                        },
                        new
                        {
                            Id = 191,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Read"
                        },
                        new
                        {
                            Id = 192,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Write"
                        },
                        new
                        {
                            Id = 193,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Add"
                        },
                        new
                        {
                            Id = 194,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Update"
                        },
                        new
                        {
                            Id = 195,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Classrooms.Delete"
                        },
                        new
                        {
                            Id = 196,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Admin"
                        },
                        new
                        {
                            Id = 197,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Read"
                        },
                        new
                        {
                            Id = 198,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Write"
                        },
                        new
                        {
                            Id = 199,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Add"
                        },
                        new
                        {
                            Id = 200,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Update"
                        },
                        new
                        {
                            Id = 201,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountClassrooms.Delete"
                        },
                        new
                        {
                            Id = 202,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Admin"
                        },
                        new
                        {
                            Id = 203,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Read"
                        },
                        new
                        {
                            Id = 204,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Write"
                        },
                        new
                        {
                            Id = 205,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Add"
                        },
                        new
                        {
                            Id = 206,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Update"
                        },
                        new
                        {
                            Id = 207,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLearningPaths.Delete"
                        },
                        new
                        {
                            Id = 208,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Admin"
                        },
                        new
                        {
                            Id = 209,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Read"
                        },
                        new
                        {
                            Id = 210,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Write"
                        },
                        new
                        {
                            Id = 211,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Add"
                        },
                        new
                        {
                            Id = 212,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Update"
                        },
                        new
                        {
                            Id = 213,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseLearningPaths.Delete"
                        },
                        new
                        {
                            Id = 214,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Admin"
                        },
                        new
                        {
                            Id = 215,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Read"
                        },
                        new
                        {
                            Id = 216,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Write"
                        },
                        new
                        {
                            Id = 217,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Add"
                        },
                        new
                        {
                            Id = 218,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Update"
                        },
                        new
                        {
                            Id = 219,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LearningPaths.Delete"
                        },
                        new
                        {
                            Id = 220,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Admin"
                        },
                        new
                        {
                            Id = 221,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Read"
                        },
                        new
                        {
                            Id = 222,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Write"
                        },
                        new
                        {
                            Id = 223,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Add"
                        },
                        new
                        {
                            Id = 224,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Update"
                        },
                        new
                        {
                            Id = 225,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CourseCategories.Delete"
                        },
                        new
                        {
                            Id = 226,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Admin"
                        },
                        new
                        {
                            Id = 227,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Read"
                        },
                        new
                        {
                            Id = 228,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Write"
                        },
                        new
                        {
                            Id = 229,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Add"
                        },
                        new
                        {
                            Id = 230,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Update"
                        },
                        new
                        {
                            Id = 231,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Courses.Delete"
                        },
                        new
                        {
                            Id = 232,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Admin"
                        },
                        new
                        {
                            Id = 233,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Read"
                        },
                        new
                        {
                            Id = 234,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Write"
                        },
                        new
                        {
                            Id = 235,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Add"
                        },
                        new
                        {
                            Id = 236,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Update"
                        },
                        new
                        {
                            Id = 237,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountCourses.Delete"
                        },
                        new
                        {
                            Id = 238,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Admin"
                        },
                        new
                        {
                            Id = 239,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Read"
                        },
                        new
                        {
                            Id = 240,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Write"
                        },
                        new
                        {
                            Id = 241,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Add"
                        },
                        new
                        {
                            Id = 242,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Update"
                        },
                        new
                        {
                            Id = 243,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lessons.Delete"
                        },
                        new
                        {
                            Id = 244,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Admin"
                        },
                        new
                        {
                            Id = 245,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Read"
                        },
                        new
                        {
                            Id = 246,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Write"
                        },
                        new
                        {
                            Id = 247,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Add"
                        },
                        new
                        {
                            Id = 248,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Update"
                        },
                        new
                        {
                            Id = 249,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountLessons.Delete"
                        },
                        new
                        {
                            Id = 250,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Admin"
                        },
                        new
                        {
                            Id = 251,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Read"
                        },
                        new
                        {
                            Id = 252,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Write"
                        },
                        new
                        {
                            Id = 253,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Add"
                        },
                        new
                        {
                            Id = 254,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Update"
                        },
                        new
                        {
                            Id = 255,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RecourseSteps.Delete"
                        },
                        new
                        {
                            Id = 256,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Admin"
                        },
                        new
                        {
                            Id = 257,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Read"
                        },
                        new
                        {
                            Id = 258,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Write"
                        },
                        new
                        {
                            Id = 259,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Add"
                        },
                        new
                        {
                            Id = 260,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Update"
                        },
                        new
                        {
                            Id = 261,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Recourses.Delete"
                        },
                        new
                        {
                            Id = 262,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Admin"
                        },
                        new
                        {
                            Id = 263,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Read"
                        },
                        new
                        {
                            Id = 264,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Write"
                        },
                        new
                        {
                            Id = 265,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Add"
                        },
                        new
                        {
                            Id = 266,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Update"
                        },
                        new
                        {
                            Id = 267,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountRecourses.Delete"
                        },
                        new
                        {
                            Id = 268,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Admin"
                        },
                        new
                        {
                            Id = 269,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Read"
                        },
                        new
                        {
                            Id = 270,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Write"
                        },
                        new
                        {
                            Id = 271,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Add"
                        },
                        new
                        {
                            Id = 272,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Update"
                        },
                        new
                        {
                            Id = 273,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AccountAnnouncements.Delete"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.OtpAuthenticator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("Expires");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReplacedByToken");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2")
                        .HasColumnName("Revoked");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevokedByIp");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int")
                        .HasColumnName("AuthenticatorType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@user.net",
                            FirstName = "Test",
                            LastName = "User",
                            PasswordHash = new byte[] { 155, 38, 159, 35, 123, 190, 14, 223, 211, 26, 211, 141, 166, 4, 6, 158, 174, 7, 102, 218, 145, 114, 11, 218, 170, 97, 206, 131, 74, 127, 146, 162, 29, 95, 89, 18, 116, 17, 41, 131, 239, 41, 152, 176, 76, 119, 147, 187, 50, 166, 21, 142, 253, 14, 106, 85, 118, 151, 25, 171, 125, 2, 152, 192 },
                            PasswordSalt = new byte[] { 98, 46, 87, 100, 103, 230, 92, 233, 50, 7, 101, 66, 181, 95, 128, 227, 63, 82, 79, 44, 81, 143, 68, 163, 163, 52, 252, 121, 14, 115, 203, 121, 199, 138, 230, 119, 196, 94, 236, 166, 227, 31, 103, 93, 227, 4, 110, 166, 138, 72, 26, 1, 198, 220, 55, 31, 240, 198, 233, 10, 17, 106, 242, 56, 0, 58, 160, 142, 22, 210, 8, 157, 128, 72, 16, 228, 90, 5, 193, 255, 44, 127, 204, 24, 157, 9, 230, 36, 227, 159, 241, 195, 154, 10, 34, 84, 97, 74, 149, 194, 153, 114, 159, 59, 110, 119, 9, 148, 245, 221, 255, 136, 160, 129, 123, 23, 65, 44, 12, 141, 171, 141, 179, 43, 214, 160, 144, 170 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AboutMe");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NationalIdentificationNumber");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("ProfileLinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfileLinkUrl");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfilePhotoPath");

                    b.Property<bool>("ShareProfile")
                        .HasColumnType("bit")
                        .HasColumnName("ShareProfile");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AboutMe = "About me",
                            BirthDate = new DateTime(1990, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NationalIdentificationNumber = "11111111110",
                            PhoneNumber = "555 555 55 55",
                            ProfileLinkUrl = "/",
                            ShareProfile = false,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.AccountAnnouncement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("Read")
                        .HasColumnType("bit")
                        .HasColumnName("Read");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AccountAnnouncements", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountCapability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("CapabilityId")
                        .HasColumnType("int")
                        .HasColumnName("CapabilityId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CapabilityId");

                    b.ToTable("AccountCapabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CapabilityId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CapabilityId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            CapabilityId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.AccountCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int")
                        .HasColumnName("CertificateId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CertificateId");

                    b.ToTable("AccountCertificates", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountClassroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int")
                        .HasColumnName("ClassroomId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("AccountClassrooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            ClassroomId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.AccountCollegeMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("CollegeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("EducationProgramId")
                        .HasColumnType("int")
                        .HasColumnName("EducationProgramId");

                    b.Property<int>("GraduationStatusId")
                        .HasColumnType("int")
                        .HasColumnName("GraduationStatusId");

                    b.Property<DateTime?>("GraduationYear")
                        .HasColumnType("datetime2")
                        .HasColumnName("GraduationYear");

                    b.Property<bool>("ProgramOnGoing")
                        .HasColumnType("bit")
                        .HasColumnName("ProgramOnGoing");

                    b.Property<DateTime>("StartingYear")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartingYear");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("GraduationStatusId");

                    b.ToTable("AccountCollegeMetadatas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CollegeId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationProgramId = 1,
                            GraduationStatusId = 1,
                            GraduationYear = new DateTime(2019, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProgramOnGoing = false,
                            StartingYear = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CollegeId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationProgramId = 2,
                            GraduationStatusId = 3,
                            GraduationYear = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProgramOnGoing = false,
                            StartingYear = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            CollegeId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationProgramId = 3,
                            GraduationStatusId = 4,
                            ProgramOnGoing = true,
                            StartingYear = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.AccountContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("ContractId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit")
                        .HasColumnName("IsAccept");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContractId");

                    b.ToTable("AccountContracts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.ToTable("AccountCourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamId");

                    b.Property<int>("NumberOfNullAnswers")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfNullAnswers");

                    b.Property<int>("NumberOfRightAnswers")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfRightAnswers");

                    b.Property<int>("NumberOfWrongAnswers")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfWrongAnswers");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExamId");

                    b.ToTable("AccountExamResults", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountForeignLanguageMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ForeignLanguageId")
                        .HasColumnType("int")
                        .HasColumnName("ForeignLanguageId");

                    b.Property<int>("ForeignLanguageLevelId")
                        .HasColumnType("int")
                        .HasColumnName("ForeignLanguageLevelId");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ForeignLanguageId");

                    b.HasIndex("ForeignLanguageLevelId");

                    b.ToTable("AccountForeignLanguageMetadatas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForeignLanguageId = 1,
                            ForeignLanguageLevelId = 1,
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForeignLanguageId = 2,
                            ForeignLanguageLevelId = 2,
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForeignLanguageId = 3,
                            ForeignLanguageLevelId = 1,
                            Priority = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.AccountLearningPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete");

                    b.Property<bool>("IsContinue")
                        .HasColumnType("bit")
                        .HasColumnName("IsContinue");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit")
                        .HasColumnName("IsLiked");

                    b.Property<bool>("IsSaved")
                        .HasColumnType("bit")
                        .HasColumnName("IsSaved");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int")
                        .HasColumnName("LearningPathId");

                    b.Property<byte>("PercentComplete")
                        .HasColumnType("tinyint")
                        .HasColumnName("PercentComplete");

                    b.Property<int>("TotalNumberOfPoints")
                        .HasColumnType("int")
                        .HasColumnName("TotalNumberOfPoints");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LearningPathId");

                    b.ToTable("AccountLearningPaths", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonId");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LessonId");

                    b.ToTable("AccountLessons", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountRecourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("RecourseId")
                        .HasColumnType("int")
                        .HasColumnName("RecourseId");

                    b.Property<int>("RecourseStepId")
                        .HasColumnType("int")
                        .HasColumnName("RecourseStepId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RecourseId");

                    b.HasIndex("RecourseStepId");

                    b.ToTable("AccountRecourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountRecourseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountRecourseId")
                        .HasColumnType("int")
                        .HasColumnName("AccountRecourseId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("RecourseDetailId")
                        .HasColumnType("int")
                        .HasColumnName("RecourseDetailId");

                    b.Property<int>("RecourseDetailStepId")
                        .HasColumnType("int")
                        .HasColumnName("RecourseDetailStepId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountRecourseId");

                    b.HasIndex("RecourseDetailId");

                    b.HasIndex("RecourseDetailStepId");

                    b.ToTable("AccountRecourseDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccountSocialMediaPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Link");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("SocialMediaPlatformId")
                        .HasColumnType("int")
                        .HasColumnName("SocialMediaPlatformId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SocialMediaPlatformId");

                    b.ToTable("AccountSocialMediaPlatforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://github.com/DotNetReactFullStack",
                            Priority = 1,
                            SocialMediaPlatformId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://www.linkedin.com/company/github/",
                            Priority = 2,
                            SocialMediaPlatformId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AddressDetail");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            AddressDetail = "Organizasyon adresi...",
                            CityId = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DistrictId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementTypeId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PublishedDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Announcements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnouncementTypeId = 1,
                            Content = "Heyecanla beklenen Son Kampüs Buluşması için geri sayıma başladık. Seninle tanışmak için sabırsızlanıyoruz...",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "20 Şubat Kampüs Buluşması Hk.",
                            OrganizationId = 1,
                            Priority = 1,
                            PublishedDate = new DateTime(2024, 2, 26, 0, 55, 56, 254, DateTimeKind.Local).AddTicks(8530),
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            AnnouncementTypeId = 1,
                            Content = "Heyecanla beklenen Son Kampüs Buluşması için geri sayıma başladık. Seninle tanışmak için sabırsızlanıyoruz...",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "21 Şubat Kampüs Buluşması Hk.",
                            OrganizationId = 1,
                            Priority = 1,
                            PublishedDate = new DateTime(2024, 2, 26, 0, 55, 56, 254, DateTimeKind.Local).AddTicks(8570),
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            AnnouncementTypeId = 1,
                            Content = "Heyecanla beklenen Son Kampüs Buluşması için geri sayıma başladık. Seninle tanışmak için sabırsızlanıyoruz...",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "22 Şubat Kampüs Buluşması Hk.",
                            OrganizationId = 1,
                            Priority = 1,
                            PublishedDate = new DateTime(2024, 2, 26, 0, 55, 56, 254, DateTimeKind.Local).AddTicks(8580),
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            AnnouncementTypeId = 1,
                            Content = "Heyecanla beklenen Son Kampüs Buluşması için geri sayıma başladık. Seninle tanışmak için sabırsızlanıyoruz...",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "23 Şubat Kampüs Buluşması Hk.",
                            OrganizationId = 1,
                            Priority = 1,
                            PublishedDate = new DateTime(2024, 2, 26, 0, 55, 56, 254, DateTimeKind.Local).AddTicks(8580),
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.AnnouncementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("AnnouncementTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Duyuru",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Haber",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AnswerDetail");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.Property<bool>("RightAnswerBool")
                        .HasColumnType("bit")
                        .HasColumnName("RightAnswerBool");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Capability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("Capabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SOLID",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AOP",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OOP",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TypeScript",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "JavaScript",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vue.js",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "React",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Angular",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = ".NET",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C#",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Spring Boot",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Java",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "J2EE",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C++",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "C",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "STM32",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CSS",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tailwind CSS",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bootstrap",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EF Core",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SQL",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Path");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İl",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İstanbul",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bursa",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ankara",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Londra",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Liverpool",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Manchester",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Roma",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Floransa",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Torino",
                            Priority = 3,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<byte>("MaximumCapacity")
                        .HasColumnType("tinyint")
                        .HasColumnName("MaximumCapacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Classrooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            MaximumCapacity = (byte)0,
                            Name = ".NET & React Full Stack - 1B"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ClassroomExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int")
                        .HasColumnName("ClassroomId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ExamId");

                    b.ToTable("ClassroomExams", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.College", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("Colleges", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anadolu Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beykoz Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Düzce Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İstanbul Teknik Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orta Doğu Teknik Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bursa Uludağ Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Boğaziçi Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hacettepe Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İstanbul Üniversitesi",
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gazi Üniversitesi",
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ContractTypeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Path");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("Contracts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ülke",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Türkiye",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İngiltere",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İtalya",
                            Priority = 4,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CourseCategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<int>("TotalDuration")
                        .HasColumnType("int")
                        .HasColumnName("TotalDuration");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CourseCategoryId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Yazılım Geliştirici Yetiştirme Kampı",
                            Priority = 1,
                            TotalDuration = 50
                        },
                        new
                        {
                            Id = 2,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "React",
                            Priority = 1,
                            TotalDuration = 20
                        },
                        new
                        {
                            Id = 3,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "TypeScript",
                            Priority = 1,
                            TotalDuration = 30
                        },
                        new
                        {
                            Id = 4,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "HTML 5",
                            Priority = 1,
                            TotalDuration = 70
                        },
                        new
                        {
                            Id = 5,
                            CourseCategoryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Proje Aşamaları",
                            Priority = 1,
                            TotalDuration = 1
                        },
                        new
                        {
                            Id = 6,
                            CourseCategoryId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Kampüs Buluşmaları",
                            Priority = 1,
                            TotalDuration = 1
                        },
                        new
                        {
                            Id = 7,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Java",
                            Priority = 1,
                            TotalDuration = 1080
                        },
                        new
                        {
                            Id = 8,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Angular",
                            Priority = 1,
                            TotalDuration = 150
                        },
                        new
                        {
                            Id = 9,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Flutter",
                            Priority = 1,
                            TotalDuration = 400
                        },
                        new
                        {
                            Id = 10,
                            CourseCategoryId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Yemek Siparişi Uygulaması",
                            Priority = 1,
                            TotalDuration = 720
                        },
                        new
                        {
                            Id = 11,
                            CourseCategoryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "C# & .NET Mülakat Part-1",
                            Priority = 1,
                            TotalDuration = 8
                        },
                        new
                        {
                            Id = 12,
                            CourseCategoryId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "C# & .NET Mülakat Part-2",
                            Priority = 1,
                            TotalDuration = 29
                        });
                });

            modelBuilder.Entity("Domain.Entities.CourseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("CourseCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yazılım Geliştirme",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kişisel Gelişim",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İstanbul Kodluyor",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yabancı Dil",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.CourseLearningPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("int")
                        .HasColumnName("LearningPathId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LearningPathId");

                    b.ToTable("CourseLearningPaths", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 4,
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 4,
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 5,
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LearningPathId = 5,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İlçe",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kadiköy",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CityId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bakırköy",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tuzla",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CityId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Osmangazi",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nilüfer",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İnegöl",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CityId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Çankaya",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CityId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Etimesgut",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CityId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yenimahalle",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 11,
                            CityId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chelsea",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 12,
                            CityId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kensington",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 13,
                            CityId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fulham",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 14,
                            CityId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ropewalks",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 15,
                            CityId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chinatown",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 16,
                            CityId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lark Lane",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 17,
                            CityId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trafford",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 18,
                            CityId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tameside",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 19,
                            CityId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bolton",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 20,
                            CityId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pomezia",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 21,
                            CityId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anzio",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 22,
                            CityId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fiumicino",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 23,
                            CityId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scandicci",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 24,
                            CityId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Empoli",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 25,
                            CityId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Signa",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 26,
                            CityId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moncalieri",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 27,
                            CityId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rivoli",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 28,
                            CityId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chieri",
                            Priority = 3,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.EducationProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollegeId")
                        .HasColumnType("int")
                        .HasColumnName("CollegeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.ToTable("EducationPrograms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollegeId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Matematik",
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CollegeId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bilgisayar Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CollegeId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elektrik-Elektronik Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CollegeId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Endüstri Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CollegeId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kimya",
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            CollegeId = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Makine Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            CollegeId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İnşaat Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            CollegeId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gıda Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            CollegeId = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yazılım Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            CollegeId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İngilizce Öğretmenliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 11,
                            CollegeId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İşletme",
                            Visibility = true
                        },
                        new
                        {
                            Id = 12,
                            CollegeId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elektrik-Elektronik Mühendisliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 13,
                            CollegeId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Matematik",
                            Visibility = true
                        },
                        new
                        {
                            Id = 14,
                            CollegeId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekonometri",
                            Visibility = true
                        },
                        new
                        {
                            Id = 15,
                            CollegeId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mimarlık",
                            Visibility = true
                        },
                        new
                        {
                            Id = 16,
                            CollegeId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Biyoloji",
                            Visibility = true
                        },
                        new
                        {
                            Id = 17,
                            CollegeId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tarih",
                            Visibility = true
                        },
                        new
                        {
                            Id = 18,
                            CollegeId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tıp",
                            Visibility = true
                        },
                        new
                        {
                            Id = 19,
                            CollegeId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Türkçe Öğretmenliği",
                            Visibility = true
                        },
                        new
                        {
                            Id = 20,
                            CollegeId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Uluslararası İlişkiler",
                            Visibility = true
                        },
                        new
                        {
                            Id = 21,
                            CollegeId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Veterinerlik",
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint")
                        .HasColumnName("Duration");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndingTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<byte>("NumberOfQuestions")
                        .HasColumnType("tinyint")
                        .HasColumnName("NumberOfQuestions");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartingTime");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamId");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ForeignLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("ForeignLanguages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Türkçe",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İngilizce",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Almanca",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Japonca",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fransızca",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.ForeignLanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("ForeignLanguageLevels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Temel Seviye (A1, A2)",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orta Seviye (B1, B2)",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İleri Seviye (C1, C2)",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Anadil",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.GraduationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("GraduationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lisans",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ön Lisans",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yüksek Lisans",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doktora",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("ImageExtensionId")
                        .HasColumnType("int")
                        .HasColumnName("ImageExtensionId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("ImageExtensionId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ImageExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ImageExtensions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LearningPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndingTime");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImageUrl");

                    b.Property<int>("LearningPathCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("LearningPathCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("NumberOfLikes")
                        .HasColumnType("int")
                        .HasColumnName("NumberOfLikes");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartingTime");

                    b.Property<int>("TotalDuration")
                        .HasColumnType("int")
                        .HasColumnName("TotalDuration");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("LearningPathCategoryId");

                    b.ToTable("LearningPaths", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingTime = new DateTime(2024, 4, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/assets/images/dotnet-react-full-stack.png",
                            LearningPathCategoryId = 1,
                            Name = ".NET & React Full-Stack | Öğrenme Yolculuğu",
                            NumberOfLikes = 11,
                            StartingTime = new DateTime(2024, 2, 20, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            TotalDuration = 30,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingTime = new DateTime(2024, 1, 20, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://lms.tobeto.com/tobeto/eep/common_show_picture_cached.aspx?pQS=eaAjNZ0uaOHiut7Ip2g6BA%3d%3d",
                            LearningPathCategoryId = 1,
                            Name = "İstanbul Kodluyor Proje Aşamaları",
                            NumberOfLikes = 42,
                            StartingTime = new DateTime(2024, 1, 20, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            TotalDuration = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingTime = new DateTime(2024, 2, 24, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://i.ytimg.com/vi/ddqiBbmA6r8/maxresdefault.jpg",
                            LearningPathCategoryId = 1,
                            Name = "Java & Angular Full-Stack | Öğrenme Yolculuğu",
                            NumberOfLikes = 33,
                            StartingTime = new DateTime(2023, 11, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalDuration = 1027,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingTime = new DateTime(2024, 1, 22, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://uploads-ssl.webflow.com/5f841209f4e71b2d70034471/60bb4a2e143f632da3e56aea_Flutter%20app%20development%20(2).png",
                            LearningPathCategoryId = 1,
                            Name = "Flutter Mobil Programlama | Öğrenme Yolculuğu",
                            NumberOfLikes = 22,
                            StartingTime = new DateTime(2023, 12, 30, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            TotalDuration = 1120,
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndingTime = new DateTime(2024, 1, 28, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://lh3.googleusercontent.com/proxy/H4zl7fiYhYBhymjzsYWqfrfmEnOuHf5zbDi_ccmg7hfQsssASfLZAGit_S2tz8XqtFeNHVOw2uRznzHMaag98EH2EbjQiuBusYJ7n7YSEpEBqr4uCAfO5y05P_6m7gSrMsxvvvnj-I2oMkNByBStqW01fzB1ag",
                            LearningPathCategoryId = 1,
                            Name = "Mülakatlarda Öne Geçme Teknikleri | Softskill",
                            NumberOfLikes = 15,
                            StartingTime = new DateTime(2024, 1, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalDuration = 60,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.LearningPathCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("LearningPathCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Genel"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VideoUrl");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Python ile Programlama Temelleri açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 113,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Python ile Programlama Temelleri",
                            VideoUrl = "S_A_VVSQdpU",
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            Content = "C# Temelleri 1 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 161,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "C# Temelleri 1",
                            VideoUrl = "FB7VUYLyl1I",
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            Content = "C# Temelleri 2 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 168,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "C# Temelleri 2",
                            VideoUrl = "1j68gb1-qOw",
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            Content = "C# 1 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 173,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "C# 1",
                            VideoUrl = "G0sOB_-WkyI",
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            Content = "C# 2 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 172,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "C# 2",
                            VideoUrl = "MU_YQtgdkKA",
                            Visibility = true
                        },
                        new
                        {
                            Id = 6,
                            Content = "SQL açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 201,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "SQL",
                            VideoUrl = "r_pbdopB4LU",
                            Visibility = true
                        },
                        new
                        {
                            Id = 7,
                            Content = "C# 3 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 177,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "C# 3",
                            VideoUrl = "qBQOqh844Mo",
                            Visibility = true
                        },
                        new
                        {
                            Id = 8,
                            Content = "Entity Framework açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 168,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Entity Framework",
                            VideoUrl = "ow-EHetuNAU",
                            Visibility = true
                        },
                        new
                        {
                            Id = 9,
                            Content = "Kurumsal Yazılım Mimarileri 1 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 177,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 1",
                            VideoUrl = "Hgqqoycoh9c",
                            Visibility = true
                        },
                        new
                        {
                            Id = 10,
                            Content = "Kurumsal Yazılım Mimarileri 2 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 186,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 2",
                            VideoUrl = "NlAj9dT3MiA",
                            Visibility = true
                        },
                        new
                        {
                            Id = 11,
                            Content = "Kurumsal Yazılım Mimarileri 3 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 181,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 3",
                            VideoUrl = "LZqMmvgCNx0",
                            Visibility = true
                        },
                        new
                        {
                            Id = 12,
                            Content = "Kurumsal Yazılım Mimarileri 4 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 192,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 4",
                            VideoUrl = "cSmUHlnHOXI",
                            Visibility = true
                        },
                        new
                        {
                            Id = 13,
                            Content = "Kurumsal Yazılım Mimarileri 5 ve AOP açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 189,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 5 ve AOP",
                            VideoUrl = "zdpPm7Q6YE0",
                            Visibility = true
                        },
                        new
                        {
                            Id = 14,
                            Content = "Kurumsal Yazılım Mimarileri 6 ve JWT açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 274,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 6 ve JWT",
                            VideoUrl = "2DchBG--kAs",
                            Visibility = true
                        },
                        new
                        {
                            Id = 15,
                            Content = "Kurumsal Yazılım Mimarileri 7 ve AOP açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 255,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kurumsal Yazılım Mimarileri 7 ve AOP",
                            VideoUrl = "mbl4BjQMX78",
                            Visibility = true
                        },
                        new
                        {
                            Id = 16,
                            Content = "Angular Giriş 1 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 241,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 1",
                            VideoUrl = "f_r8SkLWgBI",
                            Visibility = true
                        },
                        new
                        {
                            Id = 17,
                            Content = "Angular Giriş 2 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 194,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 2",
                            VideoUrl = "2fzL2LDamvM",
                            Visibility = true
                        },
                        new
                        {
                            Id = 18,
                            Content = "Angular Giriş 3 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 174,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 3",
                            VideoUrl = "3xaRghmo-kU",
                            Visibility = true
                        },
                        new
                        {
                            Id = 19,
                            Content = "Angular Giriş 4 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 181,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 4",
                            VideoUrl = "-VVVDswfEJw",
                            Visibility = true
                        },
                        new
                        {
                            Id = 20,
                            Content = "Angular Giriş 5 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 176,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 5",
                            VideoUrl = "Sb1ZpVlS8LA",
                            Visibility = true
                        },
                        new
                        {
                            Id = 21,
                            Content = "Angular Giriş 6 açıklaması",
                            CourseId = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 154,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Angular Giriş 6",
                            VideoUrl = "obK-YEOuVgY",
                            Visibility = true
                        },
                        new
                        {
                            Id = 22,
                            Content = "Html 5 Dersleri 1 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 4,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 1: Plunker Online Editörümüzü Tanıyalım",
                            VideoUrl = "pkYSPtpvDqc",
                            Visibility = true
                        },
                        new
                        {
                            Id = 23,
                            Content = "Html 5 Dersleri 2 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 4,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 2: Html nedir?",
                            VideoUrl = "C8n7li03yJM",
                            Visibility = true
                        },
                        new
                        {
                            Id = 24,
                            Content = "Html 5 Dersleri 3 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 4,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 3: Temel Html Elementleri",
                            VideoUrl = "_CyfWwttWfk",
                            Visibility = true
                        },
                        new
                        {
                            Id = 25,
                            Content = "Html 5 Dersleri 4 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 13,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 4: Linklerle Çalışmak",
                            VideoUrl = "k1uoQWyxixQ",
                            Visibility = true
                        },
                        new
                        {
                            Id = 26,
                            Content = "Html 5 Dersleri 5 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 6,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 5: Tablolarla Çalışmak",
                            VideoUrl = "aph25fXelME",
                            Visibility = true
                        },
                        new
                        {
                            Id = 27,
                            Content = "Html 5 Dersleri 6 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 7,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 6: Formatlama",
                            VideoUrl = "7pT6prRLNX0",
                            Visibility = true
                        },
                        new
                        {
                            Id = 28,
                            Content = "Html 5 Dersleri 7 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 8,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 7: Layouts",
                            VideoUrl = "0OqzuBAQ7_A",
                            Visibility = true
                        },
                        new
                        {
                            Id = 29,
                            Content = "Html 5 Dersleri 8 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 18,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 8: Form Tagleri",
                            VideoUrl = "5K5mUa_Q1VY",
                            Visibility = true
                        },
                        new
                        {
                            Id = 30,
                            Content = "Html 5 Dersleri 9 açıklaması",
                            CourseId = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 7,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Html 5 Dersleri 9: Html 5 İle Gelen Form Tagleri",
                            VideoUrl = "5vKZPDT0gcM",
                            Visibility = true
                        },
                        new
                        {
                            Id = 31,
                            Content = "İstanbul Kodluyor Proje Aşamaları açıklaması",
                            CourseId = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "İstanbul Kodluyor Proje Aşamaları",
                            VideoUrl = "lIRN7fXQIcQ",
                            Visibility = true
                        },
                        new
                        {
                            Id = 32,
                            Content = "İstanbul Kodluyor Kampüs Buluşması 2 açıklaması",
                            CourseId = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "İstanbul Kodluyor Kampüs Buluşması 2",
                            VideoUrl = "1zMSWuTgqTI",
                            Visibility = true
                        },
                        new
                        {
                            Id = 33,
                            Content = "Java Derslerine Giriş açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Java Derslerine Giriş",
                            VideoUrl = "-XfPd-cQRuo",
                            Visibility = true
                        },
                        new
                        {
                            Id = 34,
                            Content = "OOP Giriş açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "OOP Giriş",
                            VideoUrl = "2Vx_Z-5Dr4I",
                            Visibility = true
                        },
                        new
                        {
                            Id = 35,
                            Content = "OOP - Class & Interface ile Sürdürülebilirlik açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "OOP - Class & Interface ile Sürdürülebilirlik",
                            VideoUrl = "CcutMZm3WtI",
                            Visibility = true
                        },
                        new
                        {
                            Id = 36,
                            Content = "Spring Boot Giriş açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Spring Boot Giriş",
                            VideoUrl = "AMOHXH2uzgY",
                            Visibility = true
                        },
                        new
                        {
                            Id = 37,
                            Content = "Spring Boot 2 açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Spring Boot 2",
                            VideoUrl = "7Qqb4IyULmo",
                            Visibility = true
                        },
                        new
                        {
                            Id = 38,
                            Content = "Spring Boot 3 açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Spring Boot 3",
                            VideoUrl = "hyYJwO3GEic",
                            Visibility = true
                        },
                        new
                        {
                            Id = 39,
                            Content = "Spring Boot 4 açıklaması",
                            CourseId = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Spring Boot 4",
                            VideoUrl = "IWv7jLsaxLM",
                            Visibility = true
                        },
                        new
                        {
                            Id = 40,
                            Content = "Tanıtım açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Tanıtım",
                            VideoUrl = "rlKjFEKjXyg",
                            Visibility = true
                        },
                        new
                        {
                            Id = 41,
                            Content = "İşlenecek Konular ve Yapılacak Uygulama Tanıtımı açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "İşlenecek Konular ve Yapılacak Uygulama Tanıtımı",
                            VideoUrl = "x7_Rmsmkw5g",
                            Visibility = true
                        },
                        new
                        {
                            Id = 42,
                            Content = "NodeJS ve Angular Cli kurulumu açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "NodeJS ve Angular Cli kurulumu",
                            VideoUrl = "bA71kJ_ELek",
                            Visibility = true
                        },
                        new
                        {
                            Id = 43,
                            Content = "Proje oluşturma açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Proje oluşturma",
                            VideoUrl = "v9FxSVjWTic",
                            Visibility = true
                        },
                        new
                        {
                            Id = 44,
                            Content = "Kısaca Klasör Yapısı ve Dosyalar açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Kısaca Klasör Yapısı ve Dosyalar",
                            VideoUrl = "raSrjyUjFbc",
                            Visibility = true
                        },
                        new
                        {
                            Id = 45,
                            Content = "TypeScript açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "TypeScript",
                            VideoUrl = "IA9b7swmP4o",
                            Visibility = true
                        },
                        new
                        {
                            Id = 46,
                            Content = "Components açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Components",
                            VideoUrl = "ofRjx87jGlw",
                            Visibility = true
                        },
                        new
                        {
                            Id = 47,
                            Content = "Değişkenler ve Veri Tipleri açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Değişkenler ve Veri Tipleri",
                            VideoUrl = "0uHcZekbNcE",
                            Visibility = true
                        },
                        new
                        {
                            Id = 48,
                            Content = "Services açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Services",
                            VideoUrl = "Pxl5LSvRu74",
                            Visibility = true
                        },
                        new
                        {
                            Id = 49,
                            Content = "ngIf ve ngFor açıklaması",
                            CourseId = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 1,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "ngIf ve ngFor",
                            VideoUrl = "j3F6A7wK-S4",
                            Visibility = true
                        },
                        new
                        {
                            Id = 50,
                            Content = "Flutter Mobil Programlama Kampı açıklaması",
                            CourseId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 355,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Flutter Mobil Programlama Kampı",
                            VideoUrl = "oISIcfHAzm4",
                            Visibility = true
                        },
                        new
                        {
                            Id = 51,
                            Content = "Flutter SDK & Android Studio & Visual Studio Code Kurulumu açıklaması",
                            CourseId = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 56,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Flutter SDK & Android Studio & Visual Studio Code Kurulumu",
                            VideoUrl = "uyYBewriDT8",
                            Visibility = true
                        },
                        new
                        {
                            Id = 52,
                            Content = "Food Delivery App | Part 1 açıklaması",
                            CourseId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 720,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Food Delivery App | Part 1",
                            VideoUrl = "7dAt-JMSCVQ",
                            Visibility = true
                        },
                        new
                        {
                            Id = 53,
                            Content = "Full Course With API | Part 2 açıklaması",
                            CourseId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 710,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Full Course With API | Part 2",
                            VideoUrl = "GQJovou6zuE",
                            Visibility = true
                        },
                        new
                        {
                            Id = 54,
                            Content = "Flutter Ecommerce App | Part 3 açıklaması",
                            CourseId = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 193,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Flutter Ecommerce App | Part 3",
                            VideoUrl = "qapb-_gMZRs",
                            Visibility = true
                        },
                        new
                        {
                            Id = 55,
                            Content = "Giriş açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Giriş",
                            VideoUrl = "iRBN3p4J_xk",
                            Visibility = true
                        },
                        new
                        {
                            Id = 56,
                            Content = "Ne İstiyorsun? açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Ne İstiyorsun?",
                            VideoUrl = "7h0h93LS8hw",
                            Visibility = true
                        },
                        new
                        {
                            Id = 57,
                            Content = "Organizasyonel Kültürü Keşfedin açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Organizasyonel Kültürü Keşfedin",
                            VideoUrl = "46zp-3139M4",
                            Visibility = true
                        },
                        new
                        {
                            Id = 58,
                            Content = "Değer ve Referans Tipler açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Değer ve Referans Tipler",
                            VideoUrl = "_giFJC-07yw?",
                            Visibility = true
                        },
                        new
                        {
                            Id = 59,
                            Content = "Interface nedir? Ne işe yarar? açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Interface nedir? Ne işe yarar?",
                            VideoUrl = "GyCTVZTIOKM",
                            Visibility = true
                        },
                        new
                        {
                            Id = 60,
                            Content = "Framework ve Library Kavramlar Nedir? açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Framework ve Library Kavramlar Nedir?",
                            VideoUrl = "5dQeNa0Uzns",
                            Visibility = true
                        },
                        new
                        {
                            Id = 61,
                            Content = "SOLID Prensipleri Nedir? açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "SOLID Prensipleri Nedir?",
                            VideoUrl = "gdjcKwWxe08",
                            Visibility = true
                        },
                        new
                        {
                            Id = 62,
                            Content = "Single Responsibility Principle açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Single Responsibility Principle",
                            VideoUrl = "AX6nDbsP2ME",
                            Visibility = true
                        },
                        new
                        {
                            Id = 63,
                            Content = "Open Closed Principle  açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Open Closed Principle ",
                            VideoUrl = "tx2DjE-VwOY",
                            Visibility = true
                        },
                        new
                        {
                            Id = 64,
                            Content = "Liskov's Subsititution Principle açıklaması",
                            CourseId = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = 2,
                            IsActive = true,
                            Language = "Türkçe",
                            Name = "Liskov's Subsititution Principle",
                            VideoUrl = "M2bDfaZvTTs",
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressId");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContactNumber");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("OrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationTypeId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Organizations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ContactNumber = "555-555-5555",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İstanbul Kodluyor",
                            OrganizationTypeId = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organizasyon Tip-1",
                            Priority = 1,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionCategoryId");

                    b.Property<string>("QuestionDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QuestionDetail");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Recourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PublishedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Recourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RecourseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("RecourseDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RecourseDetailStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("RecourseDetailSteps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RecourseStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("RecourseSteps", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IconPath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaPlatforms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconPath = "bi bi-github",
                            Name = "Github",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconPath = "bi bi-linkedin",
                            Name = "Linkedin",
                            Priority = 2,
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconPath = "bi bi-instagram",
                            Name = "Instagram",
                            Priority = 3,
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IconPath = "bi bi-twitter",
                            Name = "Twitter",
                            Priority = 4,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectionLink");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizationId");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("PublishedDate");

                    b.Property<int>("SurveyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SurveyTypeId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("Surveys", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConnectionLink = "https://form.jotform.com/240143980661960",
                            Content = "Mindset anketi içeriği...",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            OrganizationId = 1,
                            Priority = 1,
                            PublishedDate = new DateTime(2024, 2, 26, 0, 55, 56, 258, DateTimeKind.Local).AddTicks(9230),
                            SurveyTypeId = 2,
                            Title = "Mindset Anketi",
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.SurveyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("Priority");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit")
                        .HasColumnName("Visibility");

                    b.HasKey("Id");

                    b.ToTable("SurveyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Değerlendirme Anketi",
                            Priority = 1,
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Araştırma Anketi",
                            Priority = 2,
                            Visibility = true
                        });
                });

            modelBuilder.Entity("Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EndingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndingDate");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Industry");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsCurrentlyWorking")
                        .HasColumnType("bit")
                        .HasColumnName("IsCurrentlyWorking");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JobTitle");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartingDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CityId");

                    b.ToTable("Experiences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            CityId = 1,
                            CompanyName = "Amazon",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Amazon iş açıklaması",
                            EndingDate = new DateTime(2021, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Industry = "Yazılım",
                            IsActive = true,
                            IsCurrentlyWorking = false,
                            JobTitle = "Back-End Developer",
                            StartingDate = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 1,
                            CityId = 2,
                            CompanyName = "Google",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Google iş açıklaması",
                            EndingDate = new DateTime(2022, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Industry = "Yazılım",
                            IsActive = true,
                            IsCurrentlyWorking = false,
                            JobTitle = "Front-End Developer",
                            StartingDate = new DateTime(2021, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 1,
                            CityId = 3,
                            CompanyName = "Microsoft",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Microsoft iş açıklaması",
                            Industry = "Yazılım",
                            IsActive = true,
                            IsCurrentlyWorking = true,
                            JobTitle = "Full-Stack Developer",
                            StartingDate = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.Account", null)
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("AccountId");

                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AccountAnnouncement", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountAnnouncements")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Announcement", "Announcement")
                        .WithMany("AccountAnnouncements")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("Domain.Entities.AccountCapability", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountCapabilities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Capability", "Capability")
                        .WithMany("AccountCapabilities")
                        .HasForeignKey("CapabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Capability");
                });

            modelBuilder.Entity("Domain.Entities.AccountCertificate", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountCertificates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Certificate", "Certificate")
                        .WithMany("AccountCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Domain.Entities.AccountClassroom", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountClassrooms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany("AccountClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("Domain.Entities.AccountCollegeMetadata", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountCollegeMetadatas")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.College", "College")
                        .WithMany("AccountCollegeMetadatas")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EducationProgram", "EducationProgram")
                        .WithMany("AccountCollegeMetadatas")
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GraduationStatus", "GraduationStatus")
                        .WithMany("AccountCollegeMetadatas")
                        .HasForeignKey("GraduationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("College");

                    b.Navigation("EducationProgram");

                    b.Navigation("GraduationStatus");
                });

            modelBuilder.Entity("Domain.Entities.AccountContract", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.AccountCourse", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("AccountCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.AccountExamResult", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountExamResults")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithMany("AccountExamResults")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Domain.Entities.AccountForeignLanguageMetadata", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountForeignLanguageMetadatas")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ForeignLanguage", "ForeignLanguage")
                        .WithMany("AccountForeignLanguageMetadatas")
                        .HasForeignKey("ForeignLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ForeignLanguageLevel", "ForeignLanguageLevel")
                        .WithMany("AccountForeignLanguageMetadatas")
                        .HasForeignKey("ForeignLanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ForeignLanguage");

                    b.Navigation("ForeignLanguageLevel");
                });

            modelBuilder.Entity("Domain.Entities.AccountLearningPath", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountLearningPaths")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LearningPath", "LearningPath")
                        .WithMany("AccountLearningPaths")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("Domain.Entities.AccountLesson", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountLessons")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Lesson", "Lesson")
                        .WithMany("AccountLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Domain.Entities.AccountRecourse", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountRecourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Recourse", "Recourse")
                        .WithMany("AccountRecourses")
                        .HasForeignKey("RecourseId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RecourseStep", "RecourseStep")
                        .WithMany("AccountRecourses")
                        .HasForeignKey("RecourseStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Recourse");

                    b.Navigation("RecourseStep");
                });

            modelBuilder.Entity("Domain.Entities.AccountRecourseDetail", b =>
                {
                    b.HasOne("Domain.Entities.AccountRecourse", "AccountRecourse")
                        .WithMany("AccountRecourseDetails")
                        .HasForeignKey("AccountRecourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RecourseDetail", "RecourseDetail")
                        .WithMany("AccountRecourseDetails")
                        .HasForeignKey("RecourseDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RecourseDetailStep", "RecourseDetailStep")
                        .WithMany("AccountRecourseDetails")
                        .HasForeignKey("RecourseDetailStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountRecourse");

                    b.Navigation("RecourseDetail");

                    b.Navigation("RecourseDetailStep");
                });

            modelBuilder.Entity("Domain.Entities.AccountSocialMediaPlatform", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("AccountSocialMediaPlatforms")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SocialMediaPlatform", "SocialMediaPlatform")
                        .WithMany("AccountSocialMediaPlatforms")
                        .HasForeignKey("SocialMediaPlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SocialMediaPlatform");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithOne("Address")
                        .HasForeignKey("Domain.Entities.Address", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.Entities.Announcement", b =>
                {
                    b.HasOne("Domain.Entities.AnnouncementType", "AnnouncementType")
                        .WithMany("Announcements")
                        .HasForeignKey("AnnouncementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Organization", "Organization")
                        .WithMany("Announcements")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnouncementType");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.ClassroomExam", b =>
                {
                    b.HasOne("Domain.Entities.Classroom", "Classroom")
                        .WithMany("ClassroomExams")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithMany("ClassroomExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.ContractType", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.HasOne("Domain.Entities.CourseCategory", "CourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("CourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCategory");
                });

            modelBuilder.Entity("Domain.Entities.CourseLearningPath", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("CourseLearningPaths")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LearningPath", "LearningPath")
                        .WithMany("CourseLearningPaths")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("LearningPath");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Domain.Entities.EducationProgram", b =>
                {
                    b.HasOne("Domain.Entities.College", "College")
                        .WithMany("EducationPrograms")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("Domain.Entities.ExamQuestion", b =>
                {
                    b.HasOne("Domain.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.ImageExtension", "ImageExtension")
                        .WithMany("Images")
                        .HasForeignKey("ImageExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageExtension");
                });

            modelBuilder.Entity("Domain.Entities.LearningPath", b =>
                {
                    b.HasOne("Domain.Entities.LearningPathCategory", "LearningPathCategory")
                        .WithMany("LearningPaths")
                        .HasForeignKey("LearningPathCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningPathCategory");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrganizationType", "OrganizationType")
                        .WithMany("Organizations")
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("OrganizationType");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("Domain.Entities.Recourse", b =>
                {
                    b.HasOne("Domain.Entities.Organization", "Organization")
                        .WithMany("Recourses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.HasOne("Domain.Entities.Organization", "Organization")
                        .WithMany("Surveys")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SurveyType", "SurveyType")
                        .WithMany("Surveys")
                        .HasForeignKey("SurveyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("Experience", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Experiences")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.City", "City")
                        .WithMany("Experiences")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountAnnouncements");

                    b.Navigation("AccountCapabilities");

                    b.Navigation("AccountCertificates");

                    b.Navigation("AccountClassrooms");

                    b.Navigation("AccountCollegeMetadatas");

                    b.Navigation("AccountCourses");

                    b.Navigation("AccountExamResults");

                    b.Navigation("AccountForeignLanguageMetadatas");

                    b.Navigation("AccountLearningPaths");

                    b.Navigation("AccountLessons");

                    b.Navigation("AccountRecourses");

                    b.Navigation("AccountSocialMediaPlatforms");

                    b.Navigation("Address");

                    b.Navigation("Experiences");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.AccountRecourse", b =>
                {
                    b.Navigation("AccountRecourseDetails");
                });

            modelBuilder.Entity("Domain.Entities.Announcement", b =>
                {
                    b.Navigation("AccountAnnouncements");
                });

            modelBuilder.Entity("Domain.Entities.AnnouncementType", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("Domain.Entities.Capability", b =>
                {
                    b.Navigation("AccountCapabilities");
                });

            modelBuilder.Entity("Domain.Entities.Certificate", b =>
                {
                    b.Navigation("AccountCertificates");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Districts");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("Domain.Entities.Classroom", b =>
                {
                    b.Navigation("AccountClassrooms");

                    b.Navigation("ClassroomExams");
                });

            modelBuilder.Entity("Domain.Entities.College", b =>
                {
                    b.Navigation("AccountCollegeMetadatas");

                    b.Navigation("EducationPrograms");
                });

            modelBuilder.Entity("Domain.Entities.ContractType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Course", b =>
                {
                    b.Navigation("AccountCourses");

                    b.Navigation("CourseLearningPaths");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Domain.Entities.CourseCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Domain.Entities.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.EducationProgram", b =>
                {
                    b.Navigation("AccountCollegeMetadatas");
                });

            modelBuilder.Entity("Domain.Entities.Exam", b =>
                {
                    b.Navigation("AccountExamResults");

                    b.Navigation("ClassroomExams");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Domain.Entities.ForeignLanguage", b =>
                {
                    b.Navigation("AccountForeignLanguageMetadatas");
                });

            modelBuilder.Entity("Domain.Entities.ForeignLanguageLevel", b =>
                {
                    b.Navigation("AccountForeignLanguageMetadatas");
                });

            modelBuilder.Entity("Domain.Entities.GraduationStatus", b =>
                {
                    b.Navigation("AccountCollegeMetadatas");
                });

            modelBuilder.Entity("Domain.Entities.ImageExtension", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.LearningPath", b =>
                {
                    b.Navigation("AccountLearningPaths");

                    b.Navigation("CourseLearningPaths");
                });

            modelBuilder.Entity("Domain.Entities.LearningPathCategory", b =>
                {
                    b.Navigation("LearningPaths");
                });

            modelBuilder.Entity("Domain.Entities.Lesson", b =>
                {
                    b.Navigation("AccountLessons");
                });

            modelBuilder.Entity("Domain.Entities.Organization", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Recourses");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("Domain.Entities.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("Domain.Entities.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.Recourse", b =>
                {
                    b.Navigation("AccountRecourses");
                });

            modelBuilder.Entity("Domain.Entities.RecourseDetail", b =>
                {
                    b.Navigation("AccountRecourseDetails");
                });

            modelBuilder.Entity("Domain.Entities.RecourseDetailStep", b =>
                {
                    b.Navigation("AccountRecourseDetails");
                });

            modelBuilder.Entity("Domain.Entities.RecourseStep", b =>
                {
                    b.Navigation("AccountRecourses");
                });

            modelBuilder.Entity("Domain.Entities.SocialMediaPlatform", b =>
                {
                    b.Navigation("AccountSocialMediaPlatforms");
                });

            modelBuilder.Entity("Domain.Entities.SurveyType", b =>
                {
                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
